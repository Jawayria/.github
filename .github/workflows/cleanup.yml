name: cleanup

on:
  workflow_dispatch:
    inputs:
      organization:
        description: "Github organization for the listed repos"
        type: string
        required: false
        default: openedx
      repos_list:
        description: "List of repositories where you want to run the job"
        type: string
        required: true
      python_version:
        description: "Python Version"
        type: string
        required: false
        default: '3.8'
      packages:
        description: "Space separated list of required packages"
        type: string
        required: false
        default: ''
      commit_message:
        description: "Commit message/ PR title"
        type: string
        required: true
      pr_body:
        description: "Additional information for PR body"
        type: string
        required: false
        default: ''
      branch:
        description: "Branch name"
        type: string
        required: false
        default: 'cleanup-python-code'
      draft:
        description: "Create draft PR"
        type: boolean
        required: false
        default: false
      force_delete_old_prs:
        description: "Forcefully delete old PRs"
        type: boolean
        required: false
        default: false
      script:
        description: "Script to execute on repos"
        type: string
        required: true

jobs:

  split_string:
    runs-on: ubuntu-20.04

    outputs:
      output1: ${{ steps.split_string.outputs.list }}
    steps:

    - name: get repos list
      id: split_string
      run: |
        echo "::set-output name=list::[${{github.event.inputs.repos_list}}]"

  cleanup:
    runs-on: ubuntu-20.04
    needs: [ split_string ]
    strategy:
      fail-fast: false
      matrix:
        repos: ${{fromJson(needs.split_string.outputs.output1)}}

    steps:
      - uses: actions/checkout@v2
        with:
            repository: ${{ github.event.inputs.organization}}/${{ matrix.repos }}
            ref: 'master'

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ github.event.inputs.python_version }}

      - name: install packages
        if: ${{ github.event.inputs.packages }} != ''
        run: pip install ${{ github.event.inputs.packages }}

      - name: run script
        run: ${{ github.event.inputs.script }}

      - name: setup testeng-ci
        run: |
          git clone https://github.com/Jawayria/testeng-ci.git
          cd $GITHUB_WORKSPACE/testeng-ci
          pip install -r requirements/base.txt

      - name: create pull request
        id: createpullrequest
        env:
          GITHUB_TOKEN: ${{ secrets.access_token }}
          GITHUB_USER_EMAIL: Jawayria
        run: |
          cd $GITHUB_WORKSPACE/testeng-ci
          if ${{ github.event.inputs.draft }}
          then
              draftflag="--draft"
          else
              draftflag=""
          fi

          if ${{ github.event.inputs.force_delete_old_prs}}
          then
             force_delete_old_prs_flag="--force-delete-old-prs"
          else
             force_delete_old_prs_flag="--no-force-delete-old-prs"
          fi
          python -m jenkins.pull_request_creator --repo-root=$GITHUB_WORKSPACE \
          --target-branch="master" --base-branch-name="${{ github.event.inputs.branch }}" \
          --commit-message="${{ github.event.inputs.commit_message }}" \
          --pr-title="${{ github.event.inputs.commit_message }}"  \
          --pr-body="${{ github.event.inputs.pr_body }}" \
           ${ force_delete_old_prs_flag } ${draftflag} --untracked-files-required=true
